# sros configuration file
x509_extensions: # https://access.redhat.com/documentation/en-US/Red_Hat_Certificate_System/8.0/html/Admin_Guide/Standard_X.509_v3_Certificate_Extensions.html
  root_extensions: &root_extensions
    AuthorityKeyIdentifier: # Authority Key Identifier extension identifies the public key corresponding to the private key used to sign a certificate
      critical: False # This extension is always noncritical and is always evaluated
      value:
    BasicConstraints: # This extension is used during the certificate chain verification process to identify CA certificates and to apply certificate chain path length constraints
      critical: True # PKIX Part 1 requires that this extension be marked critical. This extension is evaluated regardless of its criticality
      value:
        ca: True
        path_length: 1
    KeyUsage: # Key Usage extension defines the purpose of the key contained in the certificate
      critical: True # to enforce the usage of the certificate and key
      value:
        key_cert_sign: True # for all CA signing certificates
        crl_sign: True # for CA signing certificates that are used to sign CRLs
    SubjectKeyIdentifier: # Subject Key Identifier extension identifies the public key certified by this certificate
      critical: False # This extension is always noncritical
      value:
  master_extensions: &master_extensions
    <<: *root_extensions
    BasicConstraints: # This extension is used during the certificate chain verification process to identify CA certificates and to apply certificate chain path length constraints
      critical: True # PKIX Part 1 requires that this extension be marked critical. This extension is evaluated regardless of its criticality
      value:
        ca: True
        path_length: 0
  node_extensions: &node_extensions
    <<: *master_extensions
    BasicConstraints: # PKIX recommends that this extension should not appear in end-entity certificates
    KeyUsage: # Key Usage extension defines the purpose of the key contained in the certificate
      critical: True # to enforce the usage of the certificate and key
      value:
        digital_signature: True # for SSL client certificates, S/MIME signing certificates, and object-signing certificates
        key_encipherment: True # for SSL server certificates and S/MIME encryption certificates
        key_agreement: True # when the subject's public key is used for key agreement
    ExtendedKeyUsage: # Extended Key Usage extension indicates the purposes for which the certified public key may be used
      critical: False # PKIX Part 1 recommends that this extension be marked noncritical
      value:
        - SERVER_AUTH
        - CLIENT_AUTH
    SubjectAlternativeName: # Subject alternative name is an X.509 extension that provides a list of general name instances that provide a set of identities for which the certificate is valid.
      critical: False # If the certificate's subject field is empty, this extension must be marked critical.
      value: # dict of General Name Class types with values to use
        UniformResourceIdentifier: alternative_names # can be list or key to value in key_config

keys:
  root: &root
    issuer_name: # parent certificate authority; leave blank to specify as self singed
    key_type: rsa # {rsa,dsa}; leave blank to load private key from keystore
    key_size: 2048 # key length; commonly a power of 2, and usually no less than 2048 for security
    fingerprint_algorithm: SHA256 # fingerprint method used for singing child certificate requests
    encryption_algorithm: BestAvailableEncryption # private key cipher; leave blank to save keyfile unencrypted
    cert: &default_cert # certificate specifications; leave blank to load public certificate from keystore
      subject: &default_subject # change subject content accordingly for your use; must be somehow unique for each CA
        COUNTRY_NAME             : "ZZ" # uses two-letter country code https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2
        STATE_OR_PROVINCE_NAME   : "Sate"
        LOCALITY_NAME            : "Locality"
        ORGANIZATION_NAME        : "Organization"
        ORGANIZATIONAL_UNIT_NAME : "Organizational Unit"
        COMMON_NAME              : "root"
      serial_number: 0
      not_valid_before : 0 # intager seconds into future (positive) or past (neative) wrt. now
      not_valid_after  : 315360000 # 10yrs * 365days * 24hours * 60min * 60sec
    x509_extensions:
      <<: *root_extensions
  master: &master
    <<: *root # inherit key config defaults from root lable
    issuer_name: root # use root as
    key_size: 2048 # overide key length inherited from root
    cert:
      <<: *default_cert # forking from root cert, so include cert defaults
      subject: # change subject content accordingly for your use
        <<: *default_subject # forking from root cert, so include cert defaults
        COMMON_NAME         : "master"
      serial_number: 1
      not_valid_before : 0 # or iso8601 dates format
      not_valid_after  : 2020-12-14t21:59:43.10-05:00 # or 2020-12-14 21:59:43.10 -5
    x509_extensions:
      <<: *master_extensions
  nodes:
    <<: *master
    issuer_name: master # inherit key config defaults from master lable
    key_size: 2048 # overide key length inherited from master
    cert:
      <<: *default_cert # forking from master cert, so include cert defaults
      serial_number: 2 # starting serial_number index for incrementing count
      not_valid_before : 0 # or iso8601 dates format
      not_valid_after  : 2020-12-14 21:59:43.10 -5
    x509_extensions:
      <<: *node_extensions
